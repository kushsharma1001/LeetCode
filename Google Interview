1) Given a string S and a set of words D, find the longest word in D that is a subsequence of S.
Word W is a subsequence of S if some number of characters, possibly zero, can be deleted from S to form W, without reordering the remaining characters.
Note: D can appear in any format (list, hash table, prefix tree, etc.

For example, given the input of S = "abppplee" and D = {"able", "ale", "apple", "bale", "kangaroo"} the correct output would be "apple"
The words "able" and "ale" are both subsequences of S, but they are shorter than "apple".
The word "bale" is not a subsequence of S because even though S has all the right letters, they are not in the right order.
The word "kangaroo" is the longest word in D, but it isn't a subsequence of S.

//https://www.geeksforgeeks.org/find-largest-word-dictionary-deleting-characters-given-string/
import java.util.*; 

class GFG 
{ 

	// Returns true if str1[] is a 
	// subsequence of str2[]. m is 
	// length of str1 and n is length of str2 
	static boolean isSubSequence(String str1, 
								String str2) 
	{ 
		int m = str1.length(), n = str2.length(); 

		int j = 0; // For index of str1 (or subsequence) 

		// Traverse str2 and str1, and compare current 
		// character of str2 with first unmatched char 
		// of str1, if matched then move ahead in str1 
		for (int i = 0; i < n && j < m; i++) 
		{ 
			if (str1.charAt(j) == str2.charAt(i)) 
			{ 
				j++; 
			} 
		} 

		// If all characters of str1 
		// were found in str2 
		return (j == m); 
	} 

// Returns the longest String 
// in dictionary which is a 
// subsequence of str. 
	static String findLongestString(List<String> listOfWords, 
											String str) 
	{ 
		String result = ""; 
		int length = 0; 

		// Traverse through all words of dictionary 
		for (String word : listOfWords) 
		{ 
			
			// If current word is subsequence of str 
			// and is largest such word so far. 
			if (length < word.length() && 
				isSubSequence(word, str)) 
			{ 
				result = word; 
				length = word.length(); 
			} 
		} 

		// Return longest String 
		return result; 
	} 

	// Driver code 
	public static void main(String[] args) 
	{ 
		String[] arr = {"ale", "apple", "monkey", "plea"}; 
		List <String> listOfWords = Arrays.asList(arr); 
		String str = "abpcplea"; 
		System.out.println(findLongestString(listOfWords, str)); 
	} 
} 
